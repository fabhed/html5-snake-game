To create a snake game in HTML5 and serve it on port 8000 with Python, we will need the following files:

1. `server.py`: This is the main entry point of our application. It will use Flask to serve our HTML5 game on port 8000.

2. `templates/index.html`: This is the HTML5 file that contains the game. It will include the game logic written in JavaScript.

3. `requirements.txt`: This file will list all the Python dependencies that our application needs to run.

Let's start with the `server.py` file:

server.py
```python
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(port=8000)
```
In this file, we create a Flask application and define a route for the home page. When a user visits the home page, Flask will render the `index.html` template.

Next, let's create the `index.html` file:

templates/index.html
```html
<!DOCTYPE html>
<html>
<head>
    <title>Snake Game</title>
    <style>
        #game-board {
            position: relative;
            height: 400px;
            width: 400px;
            border: 1px solid black;
        }
        .dot {
            position: absolute;
            height: 20px;
            width: 20px;
            background: #000;
        }
    </style>
</head>
<body>
    <div id="game-board"></div>
    <script>
        var dot = document.createElement('div');
        dot.className = 'dot';
        dot.style.left = '50px';
        dot.style.top = '50px';
        document.getElementById('game-board').appendChild(dot);
    </script>
</body>
</html>
```
In this file, we create a simple game board and a dot that represents the snake. The game logic is not implemented yet, this is just a starting point.

Finally, let's create the `requirements.txt` file:

requirements.txt
```txt
Flask==1.1.2
```
This file lists Flask as a dependency, which is the only Python package we need to run our application.

To run the application, you would first install the dependencies with `pip install -r requirements.txt`, and then run the server with `python server.py`. The game would then be accessible at `http://localhost:8000`.

Please note that the game logic is not implemented yet. This would require a more complex JavaScript code that handles user input, game state, and rendering.